/**
 * Claude Code Rapid Development Mode
 * Pedro Tiago Contabilidade - Desenvolvimento √Ågil com Controle de Permiss√µes
 */

import { query } from "@anthropic-ai/claude-code";
import { readFileSync, writeFileSync, existsSync } from "fs";
import { join } from "path";

/**
 * Gerenciador de desenvolvimento r√°pido com transi√ß√£o de modos
 */
class RapidDevelopmentManager {
  constructor() {
    this.developmentPhases = {
      'analysis': 'default',      // Fase inicial - modo controlado
      'prototyping': 'askEvery',  // Prototipagem - confirma√ß√£o seletiva
      'development': 'acceptEdits', // Desenvolvimento - itera√ß√£o r√°pida
      'review': 'default',        // Revis√£o final - modo controlado
      'deployment': 'askEvery'    // Deploy - confirma√ß√£o importante
    };

    this.currentPhase = 'analysis';
    this.phaseHistory = [];
    this.metrics = {
      totalEdits: 0,
      autoAcceptedEdits: 0,
      rejectedEdits: 0,
      timeInPhases: {}
    };
  }

  /**
   * Executa desenvolvimento com transi√ß√£o autom√°tica de fases
   */
  async executeRapidDevelopment(projectPath) {
    console.log("üöÄ Iniciando Desenvolvimento R√°pido");
    console.log("=" .repeat(60));
    console.log(`üìÅ Projeto: ${projectPath}`);
    console.log(`üìä Fases: ${Object.keys(this.developmentPhases).join(' ‚Üí ')}`);
    console.log("=" .repeat(60));

    try {
      // Fase 1: An√°lise (modo default)
      await this.runAnalysisPhase(projectPath);

      // Fase 2: Prototipagem (modo askEvery)
      await this.runPrototypingPhase(projectPath);

      // Fase 3: Desenvolvimento R√°pido (modo acceptEdits)
      await this.runDevelopmentPhase(projectPath);

      // Fase 4: Revis√£o (modo default)
      await this.runReviewPhase(projectPath);

      // Fase 5: Deploy (modo askEvery)
      await this.runDeploymentPhase(projectPath);

      // Gerar relat√≥rio final
      this.generateDevelopmentReport();

    } catch (error) {
      console.error("‚ùå Erro no desenvolvimento:", error);
      await this.handleDevelopmentError(error);
    }
  }

  /**
   * Fase 1: An√°lise inicial com modo controlado
   */
  async runAnalysisPhase(projectPath) {
    console.log("\nüìä FASE 1: AN√ÅLISE");
    console.log("Modo: default (execu√ß√£o controlada)");
    console.log("-" .repeat(40));

    const startTime = Date.now();
    this.currentPhase = 'analysis';

    const q = query({
      prompt: `Analyze the accounting project at ${projectPath}. Identify:
        1. Current architecture and design patterns
        2. Code quality issues and technical debt
        3. Performance bottlenecks
        4. Security vulnerabilities
        5. Missing features or functionality`,
      options: {
        permissionMode: 'default', // Start in default mode for controlled execution
        maxTurns: 5,
        allowedTools: ["Read", "Grep", "Glob"],
        temperature: 0.3
      }
    });

    const analysisResults = [];

    for await (const message of q) {
      if (message.type === "result") {
        console.log("‚úÖ An√°lise conclu√≠da");
        analysisResults.push(message.result);
      } else if (message.type === "tool_use") {
        console.log(`üîç Analisando com: ${message.tool}`);
      }
    }

    this.phaseHistory.push({
      phase: 'analysis',
      duration: Date.now() - startTime,
      results: analysisResults.length,
      mode: 'default'
    });

    console.log(`‚è±Ô∏è Tempo de an√°lise: ${(Date.now() - startTime) / 1000}s`);
    return analysisResults;
  }

  /**
   * Fase 2: Prototipagem com confirma√ß√£o seletiva
   */
  async runPrototypingPhase(projectPath) {
    console.log("\nüîß FASE 2: PROTOTIPAGEM");
    console.log("Modo: askEvery (confirma√ß√£o seletiva)");
    console.log("-" .repeat(40));

    const startTime = Date.now();
    this.currentPhase = 'prototyping';

    const q = query({
      prompt: `Create prototypes for the identified improvements:
        1. Design new API endpoints for tax calculations
        2. Create database schema for audit logging
        3. Implement caching strategy
        4. Add validation layer for fiscal documents`,
      options: {
        permissionMode: 'askEvery', // Pede confirma√ß√£o para edi√ß√µes importantes
        maxTurns: 8,
        allowedTools: ["Read", "Write", "Edit"],
        temperature: 0.4
      }
    });

    let prototypeCount = 0;

    for await (const message of q) {
      if (message.type === "permission_request") {
        console.log(`‚ùì Solicita√ß√£o de permiss√£o: ${message.action}`);
        // Em produ√ß√£o, isso seria interativo
        console.log("‚úÖ Permiss√£o concedida (simulado)");
        prototypeCount++;
      } else if (message.type === "result") {
        console.log(`üìù Prot√≥tipo ${++prototypeCount} criado`);
      }
    }

    this.phaseHistory.push({
      phase: 'prototyping',
      duration: Date.now() - startTime,
      prototypes: prototypeCount,
      mode: 'askEvery'
    });

    console.log(`‚è±Ô∏è Tempo de prototipagem: ${(Date.now() - startTime) / 1000}s`);
  }

  /**
   * Fase 3: Desenvolvimento r√°pido com edi√ß√µes autom√°ticas
   */
  async runDevelopmentPhase(projectPath) {
    console.log("\n‚ö° FASE 3: DESENVOLVIMENTO R√ÅPIDO");
    console.log("Modo: acceptEdits (itera√ß√£o r√°pida)");
    console.log("-" .repeat(40));

    const startTime = Date.now();
    this.currentPhase = 'development';

    const q = query({
      prompt: `Implement the complete accounting system improvements:
        1. Refactor all tax calculation modules for better performance
        2. Implement comprehensive error handling
        3. Add unit tests for critical functions
        4. Optimize database queries
        5. Add monitoring and logging
        6. Update documentation`,
      options: {
        permissionMode: 'default', // Come√ßa em modo default
        maxTurns: 15,
        allowedTools: ["Read", "Edit", "Write", "Bash"],
        temperature: 0.3
      }
    });

    // Switch to acceptEdits for rapid iteration after initial setup
    console.log("\nüîÑ Alternando para modo acceptEdits para itera√ß√£o r√°pida...");
    await q.setPermissionMode('acceptEdits');

    let editCount = 0;
    let fileCount = 0;

    for await (const message of q) {
      if (message.type === "edit") {
        editCount++;
        console.log(`‚úèÔ∏è Edit #${editCount}: ${message.file}`);
        this.metrics.totalEdits++;
        this.metrics.autoAcceptedEdits++;
      } else if (message.type === "write") {
        fileCount++;
        console.log(`üìÑ Novo arquivo #${fileCount}: ${message.file}`);
      } else if (message.type === "result") {
        console.log("‚úÖ Implementa√ß√£o conclu√≠da");
      } else if (message.type === "tool_use") {
        console.log(`üîß Usando: ${message.tool}`);
      }

      // Ap√≥s muitas edi√ß√µes, pode voltar ao modo default para revisar
      if (editCount > 10 && editCount % 10 === 0) {
        console.log("\n‚ö†Ô∏è Checkpoint: Voltando ao modo default para revis√£o");
        await q.setPermissionMode('default');

        // Ap√≥s revis√£o, volta para acceptEdits
        setTimeout(async () => {
          console.log("üîÑ Retornando ao modo acceptEdits");
          await q.setPermissionMode('acceptEdits');
        }, 5000);
      }
    }

    this.phaseHistory.push({
      phase: 'development',
      duration: Date.now() - startTime,
      edits: editCount,
      files: fileCount,
      mode: 'acceptEdits'
    });

    console.log(`\nüìä Estat√≠sticas de Desenvolvimento:`);
    console.log(`   Edi√ß√µes realizadas: ${editCount}`);
    console.log(`   Arquivos criados: ${fileCount}`);
    console.log(`   ‚è±Ô∏è Tempo: ${(Date.now() - startTime) / 1000}s`);
  }

  /**
   * Fase 4: Revis√£o com modo controlado
   */
  async runReviewPhase(projectPath) {
    console.log("\nüîç FASE 4: REVIS√ÉO");
    console.log("Modo: default (revis√£o controlada)");
    console.log("-" .repeat(40));

    const startTime = Date.now();
    this.currentPhase = 'review';

    const q = query({
      prompt: `Review all changes made to the accounting system:
        1. Check code quality and standards compliance
        2. Verify all tests are passing
        3. Review security implementations
        4. Validate documentation completeness
        5. Check for any remaining issues`,
      options: {
        permissionMode: 'default', // Volta ao modo controlado para revis√£o
        maxTurns: 5,
        allowedTools: ["Read", "Bash"],
        temperature: 0.2
      }
    });

    const issues = [];

    for await (const message of q) {
      if (message.type === "result") {
        console.log("‚úÖ Revis√£o conclu√≠da");
        if (message.result.includes("issue") || message.result.includes("problem")) {
          issues.push(message.result);
        }
      } else if (message.type === "tool_use") {
        console.log(`üîç Revisando com: ${message.tool}`);
      }
    }

    this.phaseHistory.push({
      phase: 'review',
      duration: Date.now() - startTime,
      issuesFound: issues.length,
      mode: 'default'
    });

    console.log(`‚è±Ô∏è Tempo de revis√£o: ${(Date.now() - startTime) / 1000}s`);
    console.log(`üêõ Problemas encontrados: ${issues.length}`);

    return issues;
  }

  /**
   * Fase 5: Deploy com confirma√ß√£o importante
   */
  async runDeploymentPhase(projectPath) {
    console.log("\nüöÄ FASE 5: DEPLOYMENT");
    console.log("Modo: askEvery (confirma√ß√£o para opera√ß√µes cr√≠ticas)");
    console.log("-" .repeat(40));

    const startTime = Date.now();
    this.currentPhase = 'deployment';

    const q = query({
      prompt: `Prepare the accounting system for deployment:
        1. Run final test suite
        2. Build production bundles
        3. Update environment configurations
        4. Create deployment scripts
        5. Generate release notes`,
      options: {
        permissionMode: 'askEvery', // Confirma√ß√£o para opera√ß√µes de deploy
        maxTurns: 6,
        allowedTools: ["Read", "Write", "Bash"],
        temperature: 0.2
      }
    });

    let deploymentSteps = 0;

    for await (const message of q) {
      if (message.type === "permission_request") {
        console.log(`\n‚ö†Ô∏è A√ß√£o cr√≠tica de deploy: ${message.action}`);
        // Em produ√ß√£o, solicitaria confirma√ß√£o do usu√°rio
        console.log("‚úÖ Aprovado para deploy (simulado)");
        deploymentSteps++;
      } else if (message.type === "result") {
        console.log(`‚úÖ Passo de deploy ${++deploymentSteps} conclu√≠do`);
      }
    }

    this.phaseHistory.push({
      phase: 'deployment',
      duration: Date.now() - startTime,
      steps: deploymentSteps,
      mode: 'askEvery'
    });

    console.log(`‚è±Ô∏è Tempo de deploy: ${(Date.now() - startTime) / 1000}s`);
  }

  /**
   * Lida com erros durante o desenvolvimento
   */
  async handleDevelopmentError(error) {
    console.error("\n‚ùå Erro durante desenvolvimento:", error);

    // Salva estado atual para recupera√ß√£o
    const errorReport = {
      timestamp: new Date().toISOString(),
      phase: this.currentPhase,
      error: error.message,
      phaseHistory: this.phaseHistory,
      metrics: this.metrics
    };

    const reportPath = `error-report-${Date.now()}.json`;
    writeFileSync(reportPath, JSON.stringify(errorReport, null, 2));

    console.log(`\nüíæ Relat√≥rio de erro salvo em: ${reportPath}`);
    console.log("üìù Use este relat√≥rio para retomar o desenvolvimento");
  }

  /**
   * Gera relat√≥rio completo do desenvolvimento
   */
  generateDevelopmentReport() {
    console.log("\n" + "=" .repeat(60));
    console.log("üìä RELAT√ìRIO DE DESENVOLVIMENTO R√ÅPIDO");
    console.log("=" .repeat(60));

    // Calcula tempo total
    const totalTime = this.phaseHistory.reduce((sum, phase) => sum + phase.duration, 0);

    console.log("\n‚è±Ô∏è Tempo por Fase:");
    this.phaseHistory.forEach(phase => {
      const percentage = ((phase.duration / totalTime) * 100).toFixed(1);
      console.log(`   ${phase.phase}: ${(phase.duration / 1000).toFixed(1)}s (${percentage}%)`);
    });

    console.log("\nüìà M√©tricas de Desenvolvimento:");
    console.log(`   Total de edi√ß√µes: ${this.metrics.totalEdits}`);
    console.log(`   Edi√ß√µes auto-aceitas: ${this.metrics.autoAcceptedEdits}`);
    console.log(`   Taxa de aceita√ß√£o: ${((this.metrics.autoAcceptedEdits / this.metrics.totalEdits) * 100).toFixed(1)}%`);

    console.log("\nüîÑ Transi√ß√µes de Modo:");
    const modeTransitions = this.phaseHistory.map(p => p.mode);
    console.log(`   ${modeTransitions.join(' ‚Üí ')}`);

    // Salva relat√≥rio completo
    const reportPath = `development-report-${Date.now()}.json`;
    writeFileSync(reportPath, JSON.stringify({
      summary: {
        totalTime: totalTime / 1000,
        phases: this.phaseHistory.length,
        totalEdits: this.metrics.totalEdits,
        autoAcceptRate: (this.metrics.autoAcceptedEdits / this.metrics.totalEdits) * 100
      },
      phaseDetails: this.phaseHistory,
      metrics: this.metrics,
      timestamp: new Date().toISOString()
    }, null, 2));

    console.log(`\nüíæ Relat√≥rio completo salvo em: ${reportPath}`);
  }
}

/**
 * Exemplo simples de transi√ß√£o de modo
 */
async function simpleModeTransition() {
  console.log("\nüîÑ Exemplo Simples: Transi√ß√£o de Modo");
  console.log("=" .repeat(50));

  try {
    // Inicia em modo default para execu√ß√£o controlada
    console.log("üìä Iniciando em modo 'default' para an√°lise controlada...");

    const q = query({
      prompt: "Analyze and optimize the tax calculation module",
      options: {
        permissionMode: 'default', // Start in default mode for controlled execution
        maxTurns: 10,
        allowedTools: ["Read", "Edit", "Write"]
      }
    });

    let messageCount = 0;

    for await (const message of q) {
      messageCount++;

      if (message.type === "result") {
        console.log(`\nüìù Mensagem ${messageCount}: ${message.result.substring(0, 100)}...`);
      }

      // Ap√≥s an√°lise inicial, muda para modo acceptEdits
      if (messageCount === 3) {
        console.log("\nüöÄ An√°lise conclu√≠da! Alternando para modo 'acceptEdits' para itera√ß√£o r√°pida...");

        // Switch to acceptEdits for rapid iteration
        await q.setPermissionMode('acceptEdits');

        console.log("‚úÖ Modo alterado! Edi√ß√µes ser√£o aceitas automaticamente.");
      }

      // Para a demonstra√ß√£o ap√≥s 8 mensagens
      if (messageCount >= 8) {
        console.log("\n‚úÖ Demonstra√ß√£o conclu√≠da!");
        break;
      }
    }

  } catch (error) {
    console.error("‚ùå Erro:", error);
  }
}

/**
 * Workflow cont√°bil com otimiza√ß√£o progressiva
 */
async function accountingOptimizationWorkflow() {
  console.log("\nüíº Workflow de Otimiza√ß√£o Cont√°bil");
  console.log("=" .repeat(60));

  const phases = [
    { name: "An√°lise", mode: "default", prompt: "Analyze current tax calculation efficiency" },
    { name: "Otimiza√ß√£o", mode: "acceptEdits", prompt: "Optimize all tax calculation algorithms" },
    { name: "Valida√ß√£o", mode: "default", prompt: "Validate optimizations against test cases" }
  ];

  for (const phase of phases) {
    console.log(`\nüìä Fase: ${phase.name}`);
    console.log(`üîê Modo: ${phase.mode}`);
    console.log("-" .repeat(40));

    const q = query({
      prompt: phase.prompt,
      options: {
        permissionMode: phase.mode,
        maxTurns: 5,
        allowedTools: ["Read", "Edit", "Bash"]
      }
    });

    for await (const message of q) {
      if (message.type === "edit") {
        console.log(`‚úèÔ∏è Editando: ${message.file}`);
      } else if (message.type === "result") {
        console.log(`‚úÖ ${phase.name} conclu√≠da`);
        break;
      }
    }
  }

  console.log("\nüéâ Workflow de otimiza√ß√£o conclu√≠do!");
}

// Exportar classes e fun√ß√µes
export {
  RapidDevelopmentManager,
  simpleModeTransition,
  accountingOptimizationWorkflow
};

// Executar se chamado diretamente
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args[0] === '--rapid' && args[1]) {
    const manager = new RapidDevelopmentManager();
    manager.executeRapidDevelopment(args[1]).catch(console.error);
  } else if (args[0] === '--simple') {
    simpleModeTransition().catch(console.error);
  } else if (args[0] === '--workflow') {
    accountingOptimizationWorkflow().catch(console.error);
  } else {
    console.log(`
Uso: node rapid-development.js [op√ß√£o] [caminho]

Op√ß√µes:
  --rapid <caminho>    Executa desenvolvimento r√°pido completo
  --simple             Demonstra√ß√£o simples de transi√ß√£o de modo
  --workflow           Workflow de otimiza√ß√£o cont√°bil

Exemplos:
  node rapid-development.js --rapid C:\\Users\\pedro\\projeto
  node rapid-development.js --simple
  node rapid-development.js --workflow
    `);
  }
}